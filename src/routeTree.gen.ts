/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as krsRouteRouteImport } from './routes/(krs)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as krsKrsPengisianRouteImport } from './routes/(krs)/krs.pengisian'
import { Route as krsKrsLihatRouteImport } from './routes/(krs)/krs.lihat'

const krsDashLazyRouteImport = createFileRoute('/(krs)/dash')()

const krsRouteRoute = krsRouteRouteImport.update({
  id: '/(krs)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const krsDashLazyRoute = krsDashLazyRouteImport
  .update({
    id: '/dash',
    path: '/dash',
    getParentRoute: () => krsRouteRoute,
  } as any)
  .lazy(() => import('./routes/(krs)/dash.lazy').then((d) => d.Route))
const authLoginRoute = authLoginRouteImport
  .update({
    id: '/(auth)/login',
    path: '/login',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))
const krsKrsPengisianRoute = krsKrsPengisianRouteImport.update({
  id: '/krs/pengisian',
  path: '/krs/pengisian',
  getParentRoute: () => krsRouteRoute,
} as any)
const krsKrsLihatRoute = krsKrsLihatRouteImport.update({
  id: '/krs/lihat',
  path: '/krs/lihat',
  getParentRoute: () => krsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof krsRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/dash': typeof krsDashLazyRoute
  '/krs/lihat': typeof krsKrsLihatRoute
  '/krs/pengisian': typeof krsKrsPengisianRoute
}
export interface FileRoutesByTo {
  '/': typeof krsRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/dash': typeof krsDashLazyRoute
  '/krs/lihat': typeof krsKrsLihatRoute
  '/krs/pengisian': typeof krsKrsPengisianRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(krs)': typeof krsRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(krs)/dash': typeof krsDashLazyRoute
  '/(krs)/krs/lihat': typeof krsKrsLihatRoute
  '/(krs)/krs/pengisian': typeof krsKrsPengisianRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/dash' | '/krs/lihat' | '/krs/pengisian'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/dash' | '/krs/lihat' | '/krs/pengisian'
  id:
    | '__root__'
    | '/'
    | '/(krs)'
    | '/(auth)/login'
    | '/(krs)/dash'
    | '/(krs)/krs/lihat'
    | '/(krs)/krs/pengisian'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  krsRouteRoute: typeof krsRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(krs)': {
      id: '/(krs)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof krsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(krs)/dash': {
      id: '/(krs)/dash'
      path: '/dash'
      fullPath: '/dash'
      preLoaderRoute: typeof krsDashLazyRouteImport
      parentRoute: typeof krsRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(krs)/krs/pengisian': {
      id: '/(krs)/krs/pengisian'
      path: '/krs/pengisian'
      fullPath: '/krs/pengisian'
      preLoaderRoute: typeof krsKrsPengisianRouteImport
      parentRoute: typeof krsRouteRoute
    }
    '/(krs)/krs/lihat': {
      id: '/(krs)/krs/lihat'
      path: '/krs/lihat'
      fullPath: '/krs/lihat'
      preLoaderRoute: typeof krsKrsLihatRouteImport
      parentRoute: typeof krsRouteRoute
    }
  }
}

interface krsRouteRouteChildren {
  krsDashLazyRoute: typeof krsDashLazyRoute
  krsKrsLihatRoute: typeof krsKrsLihatRoute
  krsKrsPengisianRoute: typeof krsKrsPengisianRoute
}

const krsRouteRouteChildren: krsRouteRouteChildren = {
  krsDashLazyRoute: krsDashLazyRoute,
  krsKrsLihatRoute: krsKrsLihatRoute,
  krsKrsPengisianRoute: krsKrsPengisianRoute,
}

const krsRouteRouteWithChildren = krsRouteRoute._addFileChildren(
  krsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  krsRouteRoute: krsRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
